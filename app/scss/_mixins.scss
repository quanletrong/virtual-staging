	//Cross browser CSS3 mixins

@mixin box-shadow($left, $top, $radius, $color) {
	box-shadow: $left $top $radius $color;
	-webkit-box-shadow: $left $top $radius $color;
	-moz-box-shadow: $left $top $radius $color;
}

@mixin box-shadow-none() {
	box-shadow: none;
	-webkit-box-shadow: none;
	-moz-box-shadow: none;
}

@mixin transition($property, $duration, $easing: linear) {
	transition: $property $duration $easing;
	-webkit-transition: $property $duration $easing;
	-moz-transition: $property $duration $easing;
}

@mixin border-radius($radius) {
	border-radius: $radius;
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
}


@mixin filter-drop-shadow ($offset-x, $offset-y, $blur-radius, $color) {
	filter: drop-shadow($offset-x $offset-y $blur-radius $color);
	-webkit-filter: drop-shadow($offset-x $offset-y $blur-radius $color);
	-moz-filter: drop-shadow($offset-x $offset-y $blur-radius $color);
}


@mixin border-radii($topleft, $topright, $bottomright, $bottomleft) {
	border-top-left-radius: $topleft;
	border-top-right-radius: $topright;
	border-bottom-right-radius: $bottomright;
	border-bottom-left-radius: $bottomleft;
	-webkit-border-top-left-radius: $topleft;
	-webkit-border-top-right-radius: $topright;
	-webkit-border-bottom-right-radius: $bottomright;
	-webkit-border-bottom-left-radius: $bottomleft;
	-moz-border-radius-topleft: $topleft;
	-moz-border-radius-topright: $topright;
	-moz-border-radius-bottomright: $bottomright;
	-moz-border-radius-bottomleft: $bottomleft;
}

@mixin gradient($color1, $color2) {
	background-color: $color1;
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#{$color1}, endColorstr=#{$color2});
	background-image: -moz-linear-gradient(center top, $color1, $color2);
	background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($color1), to($color2));
}
@mixin background-image-full($imgUrl) {
	//background: url($imgUrl) no-repeat center center fixed; 
	background: url($imgUrl) no-repeat center center; 
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

@mixin text-gradient ($degree, $fromColor, $toColor) {
	//background: -webkit-linear-gradient($fromColor, $toColor);
	background-image: linear-gradient($degree, $fromColor, $toColor);
	-webkit-background-clip: text;
    -moz-background-clip: text;
    -webkit-text-fill-color: transparent; 
    -moz-text-fill-color: transparent;
}

//

@mixin font-text($fontStyle, $fontWeight, $fontSize, $lineHeight, $color :default null) {
    font-style: $fontStyle;
    font-weight: $fontWeight;
    font-size: $fontSize;
    line-height: $lineHeight;
    color: $color;
}

@mixin display-flexbox($display, $flex-direction, $justify :default null, $align-item :default null) {
    display: $display;
    flex-direction: $flex-direction;
    justify-content: $justify;
    align-items: $align-item;
}

@mixin position-config($position, $top :default null, $left :default null, $right :default null, $bottom :default null) {
    position: $position;
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
}

@mixin box-base($borderRadiusButton, $heightButton, $widthButton, $buttonBackground) {
    border-radius: $borderRadiusButton;
    height: $heightButton;
    width: $widthButton;
    background-color: $buttonBackground;
}

@mixin border-box($border :default null, $box_sizing :default  null, $transform :default null, $box_shadow :default null) {
    border: $border;
    box-sizing: $box_sizing;
    transform: $transform;
    box-shadow: $box_shadow;
}

@mixin word-break($break, $limitColumn) {
    word-break: $break;
    display: -webkit-box;
    -webkit-line-clamp: $limitColumn;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin media-config-width($min, $max) {
    @media screen and (min-width: $min) and (max-width: $max) {
        @content;
    }
}



// copy from bootstrap
// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@if not $n {
	  @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
	}
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width.
  // The maximum value is reduced by 0.02px to work around the limitations of
  // `min-` and `max-` prefixes and viewports with fractional widths.
  // See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
  // Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
  // See https://bugs.webkit.org/show_bug.cgi?id=178261
  //
  //    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767.98px
  @function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
	$max: map-get($breakpoints, $name);
	@return if($max and $max > 0, $max - .02, null);
  }
  
  // Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
  // Useful for making responsive utilities.
  //
  //    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    ""  (Returns a blank string)
  //    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    "-sm"
  @function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
  }
  
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
	  @media (min-width: $min) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
	  @media (max-width: $max) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($lower, $breakpoints);
	$max: breakpoint-max($upper, $breakpoints);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($lower, $breakpoints) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($upper, $breakpoints) {
		@content;
	  }
	}
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
	$min:  breakpoint-min($name, $breakpoints);
	$next: breakpoint-next($name, $breakpoints);
	$max:  breakpoint-max($next);
  
	@if $min != null and $max != null {
	  @media (min-width: $min) and (max-width: $max) {
		@content;
	  }
	} @else if $max == null {
	  @include media-breakpoint-up($name, $breakpoints) {
		@content;
	  }
	} @else if $min == null {
	  @include media-breakpoint-down($next, $breakpoints) {
		@content;
	  }
	}
  }

  

